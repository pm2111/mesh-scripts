function [GadLV,GadRV] = read_csv(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as column vectors.
%   [ID,VENTRICLE,LABEL,PVCRATEMEAN,PVCPROPORTIONMEAN,GADRV,GADLV,ATBASELINEMEAN,ATPEAKHRMEAN,ATDELTAMEAN,ATBASELINEGRADIENTMEAN,ATPEAKHRGRADIENTMEAN,ATDELTAGRADIENTMEAN,RTBASELINEMEAN,RTPEAKHRMEAN,RTDELTAMEAN,RTBASELINEGRADIENTMEAN,RTPEAKHRGRADIENTMEAN,RTDELTAGRADIENTMEAN,ARIRAWBASELINEMEAN,ARIRAWPEAKHRMEAN,ARIRAWDELTAMEAN,ARIRAWBASELINEGRADIENTMEAN,ARIRAWPEAKHRGRADIENTMEAN,ARIRAWDELTAGRADIENTMEAN,ARIBAZETTBASELINEMEAN,ARIBAZETTPEAKHRMEAN,ARIBAZETTDELTAMEAN,ARIBAZETTBASELINEGRADIENTMEAN,ARIBAZETTPEAKHRGRADIENTMEAN,ARIBAZETTDELTAGRADIENTMEAN,ARIFRIDERICIABASELINEMEAN,ARIFRIDERICIAPEAKHRMEAN,ARIFRIDERICIADELTAMEAN,ARIFRIDERICIABASELINEGRADIENTMEAN,ARIFRIDERICIAPEAKHRGRADIENTMEAN,ARIFRIDERICIADELTAGRADIENTMEAN,DEFLECTIONSBASELINEMEAN,DEFLECTIONSPEAKHRMEAN,DEFLECTIONSDELTAMEAN,PEAKTOPEAKVOLTAGEBASELINEMEAN,PEAKTOPEAKVOLTAGEPEAKHRMEAN,PEAKTOPEAKVOLTAGEDELTAMEAN]
%   = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [ID,VENTRICLE,LABEL,PVCRATEMEAN,PVCPROPORTIONMEAN,GADRV,GADLV,ATBASELINEMEAN,ATPEAKHRMEAN,ATDELTAMEAN,ATBASELINEGRADIENTMEAN,ATPEAKHRGRADIENTMEAN,ATDELTAGRADIENTMEAN,RTBASELINEMEAN,RTPEAKHRMEAN,RTDELTAMEAN,RTBASELINEGRADIENTMEAN,RTPEAKHRGRADIENTMEAN,RTDELTAGRADIENTMEAN,ARIRAWBASELINEMEAN,ARIRAWPEAKHRMEAN,ARIRAWDELTAMEAN,ARIRAWBASELINEGRADIENTMEAN,ARIRAWPEAKHRGRADIENTMEAN,ARIRAWDELTAGRADIENTMEAN,ARIBAZETTBASELINEMEAN,ARIBAZETTPEAKHRMEAN,ARIBAZETTDELTAMEAN,ARIBAZETTBASELINEGRADIENTMEAN,ARIBAZETTPEAKHRGRADIENTMEAN,ARIBAZETTDELTAGRADIENTMEAN,ARIFRIDERICIABASELINEMEAN,ARIFRIDERICIAPEAKHRMEAN,ARIFRIDERICIADELTAMEAN,ARIFRIDERICIABASELINEGRADIENTMEAN,ARIFRIDERICIAPEAKHRGRADIENTMEAN,ARIFRIDERICIADELTAGRADIENTMEAN,DEFLECTIONSBASELINEMEAN,DEFLECTIONSPEAKHRMEAN,DEFLECTIONSDELTAMEAN,PEAKTOPEAKVOLTAGEBASELINEMEAN,PEAKTOPEAKVOLTAGEPEAKHRMEAN,PEAKTOPEAKVOLTAGEDELTAMEAN]
%   = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [ID,Ventricle,Label,PVCRateMean,PVCProportionMean,GadRV,GadLV,ATBaselineMean,ATPeakHRMean,ATDeltaMean,ATBaselineGradientMean,ATPeakHRGradientMean,ATDeltaGradientMean,RTBaselineMean,RTPeakHRMean,RTDeltaMean,RTBaselineGradientMean,RTPeakHRGradientMean,RTDeltaGradientMean,ARIRawBaselineMean,ARIRawPeakHRMean,ARIRawDeltaMean,ARIRawBaselineGradientMean,ARIRawPeakHRGradientMean,ARIRawDeltaGradientMean,ARIBazettBaselineMean,ARIBazettPeakHRMean,ARIBazettDeltaMean,ARIBazettBaselineGradientMean,ARIBazettPeakHRGradientMean,ARIBazettDeltaGradientMean,ARIFridericiaBaselineMean,ARIFridericiaPeakHRMean,ARIFridericiaDeltaMean,ARIFridericiaBaselineGradientMean,ARIFridericiaPeakHRGradientMean,ARIFridericiaDeltaGradientMean,DeflectionsBaselineMean,DeflectionsPeakHRMean,DeflectionsDeltaMean,PeakToPeakVoltageBaselineMean,PeakToPeakVoltagePeakHRMean,PeakToPeakVoltageDeltaMean]
%   = importfile1('late_gad.csv',2, 401);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/12/05 10:43:47

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]);
rawCellColumns = raw(:, [2,3,6,7]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
ID = cell2mat(rawNumericColumns(:, 1));
Ventricle = rawCellColumns(:, 1);
Label = rawCellColumns(:, 2);
PVCRateMean = cell2mat(rawNumericColumns(:, 2));
PVCProportionMean = cell2mat(rawNumericColumns(:, 3));
GadRV = rawCellColumns(:, 3);
GadLV = rawCellColumns(:, 4);
ATBaselineMean = cell2mat(rawNumericColumns(:, 4));
ATPeakHRMean = cell2mat(rawNumericColumns(:, 5));
ATDeltaMean = cell2mat(rawNumericColumns(:, 6));
ATBaselineGradientMean = cell2mat(rawNumericColumns(:, 7));
ATPeakHRGradientMean = cell2mat(rawNumericColumns(:, 8));
ATDeltaGradientMean = cell2mat(rawNumericColumns(:, 9));
RTBaselineMean = cell2mat(rawNumericColumns(:, 10));
RTPeakHRMean = cell2mat(rawNumericColumns(:, 11));
RTDeltaMean = cell2mat(rawNumericColumns(:, 12));
RTBaselineGradientMean = cell2mat(rawNumericColumns(:, 13));
RTPeakHRGradientMean = cell2mat(rawNumericColumns(:, 14));
RTDeltaGradientMean = cell2mat(rawNumericColumns(:, 15));
ARIRawBaselineMean = cell2mat(rawNumericColumns(:, 16));
ARIRawPeakHRMean = cell2mat(rawNumericColumns(:, 17));
ARIRawDeltaMean = cell2mat(rawNumericColumns(:, 18));
ARIRawBaselineGradientMean = cell2mat(rawNumericColumns(:, 19));
ARIRawPeakHRGradientMean = cell2mat(rawNumericColumns(:, 20));
ARIRawDeltaGradientMean = cell2mat(rawNumericColumns(:, 21));
ARIBazettBaselineMean = cell2mat(rawNumericColumns(:, 22));
ARIBazettPeakHRMean = cell2mat(rawNumericColumns(:, 23));
ARIBazettDeltaMean = cell2mat(rawNumericColumns(:, 24));
ARIBazettBaselineGradientMean = cell2mat(rawNumericColumns(:, 25));
ARIBazettPeakHRGradientMean = cell2mat(rawNumericColumns(:, 26));
ARIBazettDeltaGradientMean = cell2mat(rawNumericColumns(:, 27));
ARIFridericiaBaselineMean = cell2mat(rawNumericColumns(:, 28));
ARIFridericiaPeakHRMean = cell2mat(rawNumericColumns(:, 29));
ARIFridericiaDeltaMean = cell2mat(rawNumericColumns(:, 30));
ARIFridericiaBaselineGradientMean = cell2mat(rawNumericColumns(:, 31));
ARIFridericiaPeakHRGradientMean = cell2mat(rawNumericColumns(:, 32));
ARIFridericiaDeltaGradientMean = cell2mat(rawNumericColumns(:, 33));
DeflectionsBaselineMean = cell2mat(rawNumericColumns(:, 34));
DeflectionsPeakHRMean = cell2mat(rawNumericColumns(:, 35));
DeflectionsDeltaMean = cell2mat(rawNumericColumns(:, 36));
PeakToPeakVoltageBaselineMean = cell2mat(rawNumericColumns(:, 37));
PeakToPeakVoltagePeakHRMean = cell2mat(rawNumericColumns(:, 38));
PeakToPeakVoltageDeltaMean = cell2mat(rawNumericColumns(:, 39));

