addpath(genpath('C:\Users\petnov\Dropbox\shared - copy'));
enableVTK;
TORSO_MODEL_DIR = 'D:\ARVC meshing automatic\patients\patient06\chaste06\';
SUBJECT_DIR = 'D:\ARVC meshing automatic\patients\patient06\';
%H0 = read_VTK( fullfile( TORSO_MODEL_DIR , 'HEART_with_UPS_louie.vtk' ) ); %this is louie's heart!

RV_WIDTH=1;
EDGE_LENGTHS=0.2;

%chaste works in cm, our meshes are built in mm (BE CAREFUL WHEN LOCATING
%INDICES OF ROOTS, always compare the same type of file eg vtk generated by
%pipeline or convert units

LV0_roots = [ 157258 , 129516 , 140114 , 131341 ];
RV0_roots = [ 198857 , 209309 , 186671 ];



HM=load(strcat(SUBJECT_DIR,'mpp\HM_0.1_400ITs.mat'));

%eval( HEART.TITLE );
HEART=HM.HM;
HEART.celltype=5;

EPI=HM.EPIms;
LV=HM.LVms;
RV=HM.RVms;
iZ=HM.iZ;

  
  Z = minv( iZ );
  HEART   = transform( HEART   , iZ );
  EPI = transform( EPI , iZ );
  LV  = transform( LV  , iZ );
  RV  = transform( RV  , iZ );

  [~,M] = jigsaw_surface_2_volume( HEART , 'delfront' , 'absolute','geom_feat',true,'hfun_hmax',0.3,'hfun_hmin',0.2);
  
  
M = MeshTidy( Mesh( M ,0) , 0 );

  %M = rmfield( vtkPolyDataNormals( M , 'SetSplitting' , true , 'SetFeatureAngle' , 1 , 'SetConsistency' , true ,'SetComputePointNormals',false,'SetComputeCellNormals',true) , 'triNormals' );
  M = MeshSplit( M , -1 );
  M.triPART = meshFacesConnectivity( Mesh(M,0) );
  %M = MeshGenerateIDs( M );
  fc = meshFacesCenter( M );
  d = zeros( size(fc) );
  d(:,1) = distanceFrom( fc , EPI );
  d(:,2) = distanceFrom( fc , LV  );
  d(:,3) = distanceFrom( fc , RV  );
  [~,M.triCL] = min( d , [] , 2 );

  for p = unique( M.triPART(:) ).'
    w = M.triPART == p;
    d = M.triCL( w );
    if alleq( d )
      M.triPART( w ) = -d(1);
    else
      M.triPART( w ) = 0;
    end
  end
  M.triPART = abs( M.triPART );
  M.triPART( M.triPART == 0 ) = 4;
  M = rmfield( M , {'triCL'} );
  M = MeshTidy( M , 0 , true );
  
    M = MeshTidy( M , -1 , true );

  
  P = sparse( (1:size(M.tri,1)).'*[1 1 1] , M.tri , 5 - M.triPART*[1 1 1] , size(M.tri,1) , size(M.xyz,1) );
  P = full( 5 - max( P , [] , 1 ).' );

  [~,order] = sortrows( [ P  , M.xyz(:,3) , atan2( M.xyz(:,2) , M.xyz(:,1) ) ] , [1 2 3] );
  M.xyz     = M.xyz( order , : );
  P         = P( order );
  M.tri     = iperm( order , M.tri );
  M.tri     = sort( M.tri , 2 );
  M = MeshFixCellOrientation( M );

  [~,order] = sortrows( [ M.triPART , M.tri ] );
  M.tri = M.tri( order , : );
  M.triPART = M.triPART( order , : );
  
%   M = rmfield( M , 'triPART' );


  ApexBase = M.xyz( argmin( M.xyz(:,3) ) , : );
  ApexBase = [ ApexBase ; ApexBase(1:2) , max( M.xyz(:,3) ) ];

  M        = transform( M , Z );
  ApexBase = transform( ApexBase , Z );
  %plotMESH( M );hplot3d( ApexBase ,'ok','markerfacecolor','r','markersize',10);
 M.TITLE = sprintf('ApexBase=%s; EPInodes=%d; LVnodes=%d; RVnodes=%d; ZEROnodes=%d;' ,...
    uneval( ApexBase ) , sum( P == 1 ) , sum( P == 2 ) , sum( P == 3 ) , sum( P == 4 ) );
    EPInodes=sum( P == 1 );
    LVnodes=sum( P == 2 );
    RVnodes= sum( P == 3 );
  
       Htetgen = gmshfn(M,['v']);
H = MeshReOrderNodes( Htetgen , M );
%figure; patch( 'vertices', H.xyz , 'faces', HEART.tri , 'edgecolor','none' ,'facecolor',[1 1 1]*.5 ); axis equal; view(3); headlight

H.xyz = double( H.xyz );

H.face = M.tri;
H.epi  = ( 1:EPInodes );
H.lv   = ( 1:LVnodes ) + EPInodes;
H.rv   = ( 1:RVnodes ) + EPInodes + LVnodes;
 
  
 

EDGE_LENGTHS=num2str(EDGE_LENGTHS);
  
mkdir_( Fullfile( strcat('chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10)) ) );
write_CHASTE( mm2cm( H ) , Fullfile(  strcat('chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10))  , 'HEART' ) );

fid = fopen( Fullfile(  strcat('chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10))  , 'apexbase' ) , 'w' );
fprintf( fid , '%0.16e %0.16e %0.16e\n' , mm2cm( ApexBase ).' );
fclose( fid );


%%

E = meshEdges( H );

%For LV
for xv = {'lv','rv'}, xv = xv{1};
  xv_edges = E( all(ismember(E, H.(xv)),2) ,:); % Node indices for edges with both nodes in xv.
  xv_edge_nodes = unique(xv_edges); % List of nodes found in xV edges (less than original file!)

  fid = fopen( Fullfile(  strcat('chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10))  , sprintf('%s_edge_nodes',xv) ) ,'w' );
  fprintf( fid , '%u\n' , xv_edge_nodes-1 ); % 0 based!!
  fclose( fid );

  % Make node indices contiguous
  [~, xv_edges_reindexed] = ismember( xv_edges , xv_edge_nodes );

  fid = fopen( Fullfile(  strcat('chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10))  , sprintf('%s.edges',xv) ),'w');
  fprintf( fid , '%u\n' , size(xv_edges_reindexed,1) );
  fwrite(  fid , xv_edges_reindexed'-1, 'uint' ); % 0 based!!
  fclose( fid );

  EL = sqrt( sum( ( H.xyz( xv_edges(:,2) ,:) - H.xyz( xv_edges(:,1) ,:) ).^2 ,2) );

  fid = fopen( Fullfile( strcat('chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10))  , sprintf('%s.weights',xv) ),'w');
  fwrite( fid , mm2cm( EL ) , 'double');
  fclose( fid );
end

H=read_CHASTE(strcat(SUBJECT_DIR,'chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10),'/HEART'));

H.xyzCellTypes=zeros(1,size(H.xyz,1))';

H.xyzCellTypes(H.epi)=1;
H.xyzCellTypes(H.lv)=2;
H.xyzCellTypes(H.rv)=3;
write_VTK(H,strcat(SUBJECT_DIR,'chaste06_edge_',EDGE_LENGTHS,'_RV_',num2str(RV_WIDTH/10),'/HEART.vtk'),'binary')
write_VTK(M,strcat(SUBJECT_DIR,'/M_0.1_400ITs.vtk'),'binary')


 figure()
hplotMESH(H,'ne')
        patch('vertices',H.xyz,'faces',H.face,'edgecolor','none','facecolor','interp',H.xyzCellTypes)
headlight


 

figure()
hplotMESH(HM.HM,'ne')
headlight

distance=@(x,y) sqrt((x(:,1)-y(:,1)).^2+(x(:,2)-y(:,2)).^2+(x(:,3)-y(:,3)).^2);
H2=load(strcat(SUBJECT_DIR,'mpp\HM_0.1250ITs.mat'));
H=load(strcat(SUBJECT_DIR,'mpp\HM_0.2.mat'));
H3=load(strcat(SUBJECT_DIR,'mpp\HM.mat'));

    idx_epi=vtkClosestPoint(H2.EPIms,H2.RVms.xyz(1:size(H2.RVms.xyz,1),:));
    
    
    dists=distance(H2.EPIms.xyz(idx_epi,:),H2.RVms.xyz(1:size(H2.RVms.xyz,1),:));

       dist_mean_2=mean(dists);
       
       
    idx_epi=vtkClosestPoint(H.EPIms,H.RVms.xyz(1:size(H.RVms.xyz,1),:));
    
    
    dists1=distance(H.EPIms.xyz(idx_epi,:),H.RVms.xyz(1:size(H.RVms.xyz,1),:));

       dist_mean_original=mean(dists1);
       
    idx_epi=vtkClosestPoint(H3.EPIms,H3.RVms.xyz(1:size(H3.RVms.xyz,1),:));
    
    
    dists2=distance(H3.EPIms.xyz(idx_epi,:),H3.RVms.xyz(1:size(H3.RVms.xyz,1),:));

       dist_mean_vert_thin=mean(dists2);
       
       
       [series,centres]=hist(dists,500);
       [series1,centres1]=hist(dists1,centres,500);
       [series2,centres2]=hist(dists2,centres,500);

       
       figure()
       bar(centres,100*series./size(H2.RVms.xyz,1),'facecolor','m')
       hold on
       
       bar(centres1,100*series1./size(H.RVms.xyz,1),'facecolor','g')
              bar(centres1,100*series2./size(H3.RVms.xyz,1),'facecolor','b')

       alpha(0.4)
        legend({'very thin','thin','normal'})
        
        
       
       bar([centres;centres1],[series;series1],'grouped')
       
       
       bar(centres,series,1,'Facecolor','r')
       hold on
       bar(centres,series1,0.5,'Facecolor','g')

        figure()
hplotMESH(EPI,'r')
hplotMESH(LV,'b')
hplotMESH(RV,'g')